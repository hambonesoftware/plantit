/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/plants/{plant_id}/photos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Photo
         * @description Upload a new photo for a plant.
         */
        post: operations["upload_photo_api_v1_plants__plant_id__photos_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/photos/{photo_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Photo
         * @description Delete a photo and associated files.
         */
        delete: operations["delete_photo_api_v1_photos__photo_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Plants */
        get: operations["list_plants_api_v1_plants_get"];
        put?: never;
        /**
         * Create Plant
         * @description Create a new plant within the specified village.
         */
        post: operations["create_plant_api_v1_plants_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plants/{plant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Plant Detail */
        get: operations["get_plant_detail_api_v1_plants__plant_id__get"];
        put?: never;
        post?: never;
        /** Delete Plant */
        delete: operations["delete_plant_api_v1_plants__plant_id__delete"];
        options?: never;
        head?: never;
        /** Patch Plant */
        patch: operations["patch_plant_api_v1_plants__plant_id__patch"];
        trace?: never;
    };
    "/api/v1/plants/{plant_id}:move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move Plant */
        post: operations["move_plant_api_v1_plants__plant_id__move_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plants/{plant_id}/care_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put Care Profile */
        put: operations["put_care_profile_api_v1_plants__plant_id__care_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plants/{plant_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Logs */
        get: operations["get_logs_api_v1_plants__plant_id__logs_get"];
        put?: never;
        /** Post Log */
        post: operations["post_log_api_v1_plants__plant_id__logs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/plants/{plant_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Task */
        post: operations["create_task_api_v1_plants__plant_id__tasks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tasks */
        get: operations["list_tasks_api_v1_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Task Endpoint */
        patch: operations["update_task_endpoint_api_v1_tasks__task_id__patch"];
        trace?: never;
    };
    "/api/v1/tasks/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Batch Update Endpoint */
        post: operations["batch_update_endpoint_api_v1_tasks_batch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search
         * @description Perform a search across plants and logs.
         */
        get: operations["search_api_v1_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tags
         * @description Return tags with usage counts.
         */
        get: operations["list_tags_api_v1_tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard
         * @description Return aggregated dashboard data.
         */
        get: operations["get_dashboard_api_v1_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Data
         * @description Return an export bundle for the requested scope.
         */
        get: operations["export_data_api_v1_export_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Data
         * @description Import a bundle and upsert records.
         */
        post: operations["import_data_api_v1_import_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Health
         * @description Return a simple health status.
         */
        get: operations["read_health_api_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/villages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Villages
         * @description Return all villages.
         */
        get: operations["get_villages_api_v1_villages_get"];
        put?: never;
        /**
         * Post Village
         * @description Create a new village.
         */
        post: operations["post_village_api_v1_villages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/villages/{village_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Village Detail
         * @description Return a single village.
         */
        get: operations["get_village_detail_api_v1_villages__village_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Village
         * @description Delete a village.
         */
        delete: operations["delete_village_api_v1_villages__village_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Village
         * @description Partially update a village.
         */
        patch: operations["patch_village_api_v1_villages__village_id__patch"];
        trace?: never;
    };
    "/media/{requested_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Media
         * @description Serve media files from the configured media root.
         */
        get: operations["get_media_media__requested_path__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_photo_api_v1_plants__plant_id__photos_post */
        Body_upload_photo_api_v1_plants__plant_id__photos_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Caption */
            caption?: string | null;
        };
        /** CalendarBucketRead */
        CalendarBucketRead: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /** Count */
            count: number;
        };
        /** DashboardResponse */
        DashboardResponse: {
            /** Villages */
            villages: components["schemas"]["VillageSummaryRead"][];
            /** Today */
            today: components["schemas"]["TaskSummaryRead"][];
            /** Calendar */
            calendar: components["schemas"]["CalendarBucketRead"][];
        };
        /** EntityRef */
        EntityRef: {
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /**
         * ExportBundle
         * @description The full payload representing an export bundle.
         */
        "ExportBundle-Input": {
            meta: components["schemas"]["ExportMeta"];
            /** Villages */
            villages: components["schemas"]["VillageRecord"][];
            /** Plants */
            plants: components["schemas"]["PlantRecord"][];
            /** Tasks */
            tasks: components["schemas"]["TaskRecord"][];
            /** Logs */
            logs: components["schemas"]["LogRecord"][];
            /** Photos */
            photos: components["schemas"]["PhotoRecord"][];
            /** Media */
            media?: components["schemas"]["MediaManifestEntry"][];
        };
        /**
         * ExportBundle
         * @description The full payload representing an export bundle.
         */
        "ExportBundle-Output": {
            meta: components["schemas"]["ExportMeta"];
            /** Villages */
            villages: components["schemas"]["VillageRecord"][];
            /** Plants */
            plants: components["schemas"]["PlantRecord"][];
            /** Tasks */
            tasks: components["schemas"]["TaskRecord"][];
            /** Logs */
            logs: components["schemas"]["LogRecord"][];
            /** Photos */
            photos: components["schemas"]["PhotoRecord"][];
            /** Media */
            media?: components["schemas"]["MediaManifestEntry"][];
        };
        /**
         * ExportMeta
         * @description Metadata describing an export bundle.
         */
        ExportMeta: {
            /**
             * Version
             * @default 1.0
             */
            version: string;
            /**
             * Exported At
             * Format: date-time
             */
            exported_at: string;
            scope: components["schemas"]["ExportScope"];
            /** Filter */
            filter?: {
                [key: string]: number | null;
            };
        };
        /**
         * ExportScope
         * @description Supported scopes for export bundles.
         * @enum {string}
         */
        ExportScope: "all" | "village" | "plant";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ImportSummary
         * @description Report generated after importing a bundle.
         */
        ImportSummary: {
            /**
             * Status
             * @enum {string}
             */
            status: "success" | "partial";
            /** Created */
            created: {
                [key: string]: number;
            };
            /** Updated */
            updated: {
                [key: string]: number;
            };
            /** Conflicts */
            conflicts?: string[];
            /** Id Map */
            id_map?: {
                [key: string]: {
                    [key: string]: number;
                };
            };
        };
        /**
         * LogCreate
         * @description Payload to create a new log entry.
         */
        LogCreate: {
            /** Action */
            action: string;
            /** Notes */
            notes?: string | null;
            /** Performed At */
            performed_at?: string | null;
            /** Task Id */
            task_id?: number | null;
        };
        /**
         * LogRead
         * @description Serialized log entry.
         */
        LogRead: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Task Id */
            task_id?: number | null;
            /** Action */
            action: string;
            /** Notes */
            notes?: string | null;
            /**
             * Performed At
             * Format: date-time
             */
            performed_at: string;
        };
        /**
         * LogRecord
         * @description Serializable representation of a log entry.
         */
        LogRecord: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Task Id */
            task_id?: number | null;
            /** Action */
            action: string;
            /** Notes */
            notes?: string | null;
            /**
             * Performed At
             * Format: date-time
             */
            performed_at: string;
        };
        /**
         * MediaManifestEntry
         * @description A single media file reference included in an export.
         */
        MediaManifestEntry: {
            /** File Path */
            file_path: string;
            /** Thumbnail Path */
            thumbnail_path: string;
            /** Size Bytes */
            size_bytes: number;
            /** Exists */
            exists: boolean;
        };
        /**
         * PhotoRead
         * @description Serialized photo metadata.
         * @example {
         *       "caption": "Blooming!",
         *       "captured_at": "2025-05-01T08:00:00Z",
         *       "content_type": "image/jpeg",
         *       "file_path": "2025/05/abc.jpg",
         *       "filename": "abc.jpg",
         *       "height": 1200,
         *       "id": 1,
         *       "plant_id": 2,
         *       "size_bytes": 345678,
         *       "thumbnail_path": "2025/05/thumb_abc.jpg",
         *       "uploaded_at": "2025-05-02T09:00:00Z",
         *       "width": 1600
         *     }
         */
        PhotoRead: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Filename */
            filename: string;
            /** File Path */
            file_path: string;
            /** Thumbnail Path */
            thumbnail_path: string;
            /** Content Type */
            content_type: string;
            /** Size Bytes */
            size_bytes: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
            /** Caption */
            caption?: string | null;
            /**
             * Captured At
             * Format: date-time
             */
            captured_at: string;
            /**
             * Uploaded At
             * Format: date-time
             */
            uploaded_at: string;
        };
        /**
         * PhotoRecord
         * @description Serializable representation of a photo.
         */
        PhotoRecord: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Filename */
            filename: string;
            /** File Path */
            file_path: string;
            /** Thumbnail Path */
            thumbnail_path: string;
            /** Content Type */
            content_type: string;
            /** Size Bytes */
            size_bytes: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
            /** Caption */
            caption?: string | null;
            /**
             * Captured At
             * Format: date-time
             */
            captured_at: string;
            /**
             * Uploaded At
             * Format: date-time
             */
            uploaded_at: string;
        };
        /**
         * PlantCareProfile
         * @description Care cadence and notes for a plant.
         */
        PlantCareProfile: {
            /** Watering Interval Days */
            watering_interval_days?: number | null;
            /** Feeding Interval Days */
            feeding_interval_days?: number | null;
            /** Pruning Interval Days */
            pruning_interval_days?: number | null;
            /** Misting Interval Days */
            misting_interval_days?: number | null;
            /** Notes */
            notes?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * PlantCareProfileUpdate
         * @description Update payload for care profile.
         */
        PlantCareProfileUpdate: {
            /** Watering Interval Days */
            watering_interval_days?: number | null;
            /** Feeding Interval Days */
            feeding_interval_days?: number | null;
            /** Pruning Interval Days */
            pruning_interval_days?: number | null;
            /** Misting Interval Days */
            misting_interval_days?: number | null;
            /** Notes */
            notes?: string | null;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * PlantCreate
         * @description Payload used when creating a plant.
         */
        PlantCreate: {
            /** Village Id */
            village_id: number;
            /** Name */
            name: string;
            /** Species */
            species?: string | null;
            /** Variety */
            variety?: string | null;
            /** @default herb */
            kind: components["schemas"]["PlantKind"];
            /** Acquired On */
            acquired_on?: string | null;
            /** Tags */
            tags?: string[];
            /** Notes */
            notes?: string | null;
        };
        /**
         * PlantDetail
         * @description Full detail payload for plant view.
         */
        PlantDetail: {
            /** Id */
            id: number;
            /** Village Id */
            village_id: number;
            /** Name */
            name: string;
            /** Species */
            species?: string | null;
            /** Variety */
            variety?: string | null;
            kind: components["schemas"]["PlantKind"];
            /** Acquired On */
            acquired_on?: string | null;
            /** Tags */
            tags?: string[];
            /** Notes */
            notes?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            care_profile: components["schemas"]["PlantCareProfile"];
            hero_photo: components["schemas"]["PhotoRead"] | null;
            /** Photos */
            photos: components["schemas"]["PhotoRead"][];
            /** Tasks */
            tasks: components["schemas"]["TaskRead"][];
            /** Logs */
            logs: components["schemas"]["LogRead"][];
            metrics: components["schemas"]["PlantOverviewMetrics"];
        };
        /**
         * PlantKind
         * @description Supported plant categories.
         * @enum {string}
         */
        PlantKind: "vegetable" | "herb" | "flower" | "succulent" | "tree";
        /**
         * PlantMoveRequest
         * @description Request payload to move a plant between villages.
         */
        PlantMoveRequest: {
            /** Destination Village Id */
            destination_village_id: number;
        };
        /**
         * PlantOverviewMetrics
         * @description Derived metrics displayed on the overview tab.
         */
        PlantOverviewMetrics: {
            /**
             * Due Tasks
             * @default 0
             */
            due_tasks: number;
            /**
             * Overdue Tasks
             * @default 0
             */
            overdue_tasks: number;
            /** Last Logged At */
            last_logged_at?: string | null;
        };
        /**
         * PlantRead
         * @description Serialized representation of a plant.
         */
        PlantRead: {
            /** Id */
            id: number;
            /** Village Id */
            village_id: number;
            /** Name */
            name: string;
            /** Species */
            species?: string | null;
            /** Variety */
            variety?: string | null;
            kind: components["schemas"]["PlantKind"];
            /** Acquired On */
            acquired_on?: string | null;
            /** Tags */
            tags?: string[];
            /** Notes */
            notes?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PlantRecord
         * @description Serializable representation of a plant.
         */
        PlantRecord: {
            /** Id */
            id: number;
            /** Village Id */
            village_id: number;
            /** Name */
            name: string;
            /** Species */
            species: string;
            /** Variety */
            variety?: string | null;
            /** Kind */
            kind: string;
            /** Acquired On */
            acquired_on?: string | null;
            /** Tags */
            tags?: string[];
            /** Care Profile */
            care_profile?: {
                [key: string]: unknown;
            };
            /** Notes */
            notes?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PlantTaskCreate
         * @description Payload to schedule a new task for a plant.
         */
        PlantTaskCreate: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** Category */
            category?: string | null;
        };
        /**
         * PlantUpdate
         * @description Partial update payload for a plant.
         */
        PlantUpdate: {
            /** Name */
            name?: string | null;
            /** Species */
            species?: string | null;
            /** Variety */
            variety?: string | null;
            kind?: components["schemas"]["PlantKind"] | null;
            /** Acquired On */
            acquired_on?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Notes */
            notes?: string | null;
        };
        /** SearchResultRead */
        SearchResultRead: {
            /** Type */
            type: string;
            /** Id */
            id: number;
            /** Title */
            title: string;
            /** Snippet */
            snippet: string;
        };
        /** TagCount */
        TagCount: {
            /** Tag */
            tag: string;
            /** Count */
            count: number;
        };
        /**
         * TaskBatchUpdate
         * @description Batch operation payload for multiple tasks.
         */
        TaskBatchUpdate: {
            /** Task Ids */
            task_ids: number[];
            state?: components["schemas"]["TaskState"] | null;
            /** Due Date */
            due_date?: string | null;
        };
        /**
         * TaskCategory
         * @description Type of maintenance task.
         * @enum {string}
         */
        TaskCategory: "custom" | "watering" | "feeding" | "pruning" | "misting" | "inspection";
        /**
         * TaskPlantSummary
         * @description Minimal plant information attached to a task.
         */
        TaskPlantSummary: {
            /** Id */
            id: number;
            /** Name */
            name: string;
        };
        /**
         * TaskRead
         * @description Serialized task object.
         */
        TaskRead: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            state: components["schemas"]["TaskState"];
            category: components["schemas"]["TaskCategory"];
            /** Completed At */
            completed_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            plant?: components["schemas"]["TaskPlantSummary"] | null;
        };
        /**
         * TaskRecord
         * @description Serializable representation of a task.
         */
        TaskRecord: {
            /** Id */
            id: number;
            /** Plant Id */
            plant_id: number;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            /** State */
            state: string;
            /** Category */
            category: string;
            /** Completed At */
            completed_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * TaskState
         * @description Lifecycle states for maintenance tasks.
         * @enum {string}
         */
        TaskState: "pending" | "completed" | "skipped";
        /** TaskSummaryRead */
        TaskSummaryRead: {
            /** Id */
            id: number;
            /** Title */
            title: string;
            /** Due Date */
            due_date: string | null;
            plant: components["schemas"]["EntityRef"];
            village: components["schemas"]["EntityRef"];
        };
        /**
         * TaskUpdate
         * @description Partial update payload for a task.
         */
        TaskUpdate: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Due Date */
            due_date?: string | null;
            state?: components["schemas"]["TaskState"] | null;
            category?: components["schemas"]["TaskCategory"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VillageCreate
         * @description Payload for creating a village.
         */
        VillageCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /**
         * VillageRead
         * @description Serialized representation of a village.
         */
        VillageRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * VillageRecord
         * @description Serializable representation of a village.
         */
        VillageRecord: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** VillageSummaryRead */
        VillageSummaryRead: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Plant Count */
            plant_count: number;
            /** Due Today */
            due_today: number;
            /** Overdue */
            overdue: number;
            /** Last Watered Days */
            last_watered_days: number | null;
            /** Cover Photo */
            cover_photo: string | null;
        };
        /**
         * VillageUpdate
         * @description Partial update payload for a village.
         */
        VillageUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    upload_photo_api_v1_plants__plant_id__photos_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_photo_api_v1_plants__plant_id__photos_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhotoRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_photo_api_v1_photos__photo_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                photo_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_plants_api_v1_plants_get: {
        parameters: {
            query?: {
                village_id?: number | null;
                q?: string | null;
                tag?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["PlantRead"][];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_plant_api_v1_plants_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_plant_detail_api_v1_plants__plant_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_plant_api_v1_plants__plant_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_plant_api_v1_plants__plant_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    move_plant_api_v1_plants__plant_id__move_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantMoveRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_care_profile_api_v1_plants__plant_id__care_profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantCareProfileUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_logs_api_v1_plants__plant_id__logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_log_api_v1_plants__plant_id__logs_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_task_api_v1_plants__plant_id__tasks_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plant_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlantTaskCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tasks_api_v1_tasks_get: {
        parameters: {
            query?: {
                state?: string | null;
                category?: string | null;
                plant_id?: number | null;
                due_before?: string | null;
                due_after?: string | null;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_task_endpoint_api_v1_tasks__task_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    batch_update_endpoint_api_v1_tasks_batch_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskBatchUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_api_v1_search_get: {
        parameters: {
            query: {
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchResultRead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tags_api_v1_tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagCount"][];
                };
            };
        };
    };
    get_dashboard_api_v1_dashboard_get: {
        parameters: {
            query?: {
                today?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_data_api_v1_export_get: {
        parameters: {
            query?: {
                /** @description Scope of the export */
                scope?: components["schemas"]["ExportScope"];
                /** @description Identifier for plant or village when scope requires it. */
                target_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportBundle-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    import_data_api_v1_import_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportBundle-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_health_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    get_villages_api_v1_villages_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["VillageRead"][];
                    };
                };
            };
        };
    };
    post_village_api_v1_villages_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VillageRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_village_detail_api_v1_villages__village_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                village_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VillageRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_village_api_v1_villages__village_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                village_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_village_api_v1_villages__village_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                village_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VillageRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_media_media__requested_path__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                requested_path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
